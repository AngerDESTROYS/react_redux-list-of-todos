{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","SET_QUERY","SET_STATUS","initialState","query","status","filterReducer","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","matchesQuery","title","toLowerCase","trim","includes","matchesStatus","completed","length","className","map","id","onClick","setTodo","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","userData","catch","error","console","href","email","name","App","setTodos","loading","setLoading","fetchedTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed3c3b48.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","const SET_QUERY = 'filter/SET_QUERY';\nconst SET_STATUS = 'filter/SET_STATUS';\n\ninterface FilterState {\n  query: string;\n  status: string;\n}\n\nconst initialState: FilterState = {\n  query: '',\n  status: 'all',\n};\n\ninterface SetQueryAction {\n  type: 'filter/SET_QUERY';\n  payload: string;\n}\n\ninterface SetStatusAction {\n  type: 'filter/SET_STATUS';\n  payload: string;\n}\n\ntype FilterAction = SetQueryAction | SetStatusAction;\n\n// Action creators\nconst setQuery = (query: string) => ({\n  type: SET_QUERY,\n  payload: query,\n});\n\nconst setStatus = (status: string) => ({\n  type: SET_STATUS,\n  payload: status,\n});\n\nexport const actions = {\n  setQuery,\n  setStatus,\n};\n\nconst filterReducer = (state: FilterState = initialState,\n  action: FilterAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case SET_STATUS:\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\nexport const actions = {};\n\nconst todosReducer = (): Todo[] => {\n  return [];\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { RootState } from '../../app/store';\n\ninterface TodoListProps {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector((state) => state.filter);\n  const currentTodo = useAppSelector((state: RootState) => state.currentTodo);\n\n  const setTodo = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  const filteredTodos = todos.filter((todo) => {\n    const matchesQuery = todo.title.toLowerCase().trim().includes(query.toLowerCase().trim());\n    const matchesStatus = status === 'all' || (status === 'active' && !todo.completed) || (status === 'completed' && todo.completed);\n\n    return matchesQuery && matchesStatus;\n  });\n\n  return (\n    <>\n      {todos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => (\n              <tr data-cy=\"todo\" key={todo.id} className={todo === currentTodo ? 'has-background-info-light' : ''}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed ? (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  ) : null}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setTodo(todo)}\n                  >\n                    {todo === currentTodo ? (\n                      <i className=\"far fa-eye-slash\" />\n                    ) : (\n                      <i className=\"far fa-eye\" />\n                    )}\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { RootState } from '../../app/store';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const { query, status } = useAppSelector((state: RootState) => state.filter);\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.setQuery(event.target.value));\n  };\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.setStatus(event.target.value));\n  };\n\n  const handleClearSearch = () => {\n    dispatch(actions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearSearch}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { RootState } from '../../app/store';\nimport { actions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [user, setUser] = useState<User | null>(null);\n\n  const currentTodo = useSelector((state: RootState) => state.currentTodo);\n\n  const closeModal = () => {\n    dispatch(actions.removeTodo());\n    setUser(null);\n  };\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then((userData) => {\n          setUser(userData);\n        })\n        .catch((error) => {\n          // eslint-disable-next-line no-console\n          console.error('Error fetching user data:', error);\n        });\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className={`modal ${currentTodo ? 'is-active' : ''}`} data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user === null ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {currentTodo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            {currentTodo && user && (\n              <p className=\"block\" data-cy=\"modal-user\">\n                <strong\n                  className={currentTodo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {currentTodo.completed ? 'Done ' : 'Planned '}\n                </strong>\n                by\n                {' '}\n                <a href={`mailto:${user.email}`}>{user.name}</a>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { useAppSelector } from './app/hooks';\nimport { RootState } from './app/store';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(false);\n  const currentTodo = useAppSelector((state: RootState) => state.currentTodo);\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then((fetchedTodos) => {\n        setLoading(false);\n        setTodos(fetchedTodos);\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.error('Error fetching todos:', error);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {loading ? <Loader /> : <TodoList todos={todos} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (<TodoModal />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}